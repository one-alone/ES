<?php



/**
 * Created by PhpStorm.
 * User: 自动生成模型
 * Date: 2017/9/11
 * Time: 17:33
 */
class KitController extends BaseController
{
    public  function init () {
        parent::init(); // TODO: Change the autogenerated stub
        $this->_db_name = $GLOBALS['mysql']['master']['MYSQL_DB'];
    }

    public $_db_name= null;



    /**
     * http://localhost/shell/kit/tpl 浏览器访问
     * 可视化模板生成入口
     */
    public function actionTpl()
    {
        $table = Helper::request('table', '');
        $type = Helper::request('type', '');
        if (!empty($table)) {
            switch ($type){
                case 0:
                    Helper::responseJson($this->form($table, "list")) ;
                    break;
                case 1:
                    Helper::responseJson($this->form($table,"form" ));
                    break;
                case 2:
                    Helper::responseJson($this->controller($table));
                    break;
                case 3:
                    Helper::responseJson($this->shows($table));
                    break;
            }
        }
        $db = new Model();
        $tables = $db->query("show tables");
        $this->tables = $tables;
        $this->display();
    }


    /**
     * 自动生成所有模型文件
     * php es kit database
     */
    public function actionDataBase()
    {
        $fileSystem = new Symfony\Component\Filesystem\Filesystem();
        $db = new Model();
        $tables = $db->query("show tables");
        foreach ($tables as $table) {
            $m = $table['Tables_in_'.$this->_db_name];
            $displayStr = $this->shows($m);
            $filename = APP_DIR . "/src/model/" . ucfirst($this->table) . ".php";
            if ($fileSystem->exists($filename)) {
                $filename = APP_DIR . "/src/model/" . ucfirst($this->table) . "_new.php";
            }
            $fileSystem->dumpFile($filename, "<" . $displayStr);

            echo "模型 $m 生成成功 ! \r\n";
        }
    }

    /**
     * 自动生成指定表名模型
     * php es kit model
     */
    public  function actionModel()
    {
        fwrite(STDOUT, '请输入需要生成模型的表名：');
        $m = fgets(STDIN);
        if (strlen($m) < 3) {
            $m = DEFAULT_APP;
        }
        $fileSystem = new Symfony\Component\Filesystem\Filesystem();
        if(substr($m,0 , strlen($GLOBALS['prefix'])) != $GLOBALS['prefix']){
            $m = $GLOBALS['prefix'].$m;
        }
        $displayStr = $this->shows($m);
        $filename = APP_DIR . "/src/model/" . ucfirst($this->table) . ".php";
        if ($fileSystem->exists($filename)) {
            $filename = APP_DIR . "/src/model/" . ucfirst($this->table) . "_new.php";
        }
        $fileSystem->dumpFile($filename, "<" . $displayStr);
        echo "模型 $m 生成成功 ! \r\n";
    }



    /**
     * 自动生成所有文件
     * php es kit tplauto
     */
    public function actionTplAuto()
    {
        $fileSystem = new Symfony\Component\Filesystem\Filesystem();
        $db = new Model();
        $tables = $db->query("show tables");
        $src =  APP_DIR.'/src/';
        foreach ($tables as $table) {
            $m = $table['Tables_in_'.$this->_db_name];
            //$m = 'tb_auto_test';
            $displayStr = $this->shows($m);
            $filename = $src . "model/" . ucfirst($this->table) . ".php";
            if ($fileSystem->exists($filename)) {
                //$filename = $src . "model/" . ucfirst($this->table) . "_new.php";
                echo "模型 $m 已存在 ! \r\n";
            }else{
                $fileSystem->dumpFile($filename, "<" . $displayStr);
                echo "模型 $m 生成成功 ! \r\n";
            }


            $displayStr = $this->controller($m);
            $filename = $src . "controller/admin/" . ucfirst(strtolower($this->table)) . "Controller.php";
            if ($fileSystem->exists($filename)) {
               // $filename = $src . "controller/admin/" . ucfirst(strtolower($this->table)) . "Controller_new.php";
                echo "控制器 $m 已存在 ! \r\n";
            }else{
                $fileSystem->dumpFile($filename, "<" . $displayStr);
                echo "控制器 $m 生成成功 ! \r\n";
            }


            $displayStr = $this->form($m,'list');
            $path = $src . "view/admin/" . strtolower($this->table);
           // Common::createFolder($path);
            $filename = $path. "/list.php";
            if ($fileSystem->exists($filename)) {
               // $filename = $path. "/list_new.php";
                echo "视图 列表页 $m 已存在 ! \r\n";
            }else{
                $fileSystem->dumpFile($filename, "<" . $displayStr);
                echo "视图 列表页 $m 生成成功 ! \r\n";
            }


            $displayStr = $this->form($m,'form');
            $path = $src . "view/admin/" . strtolower($this->table);
            // Common::createFolder($path);
            $filename = $path. "/form.php";
            if ($fileSystem->exists($filename)) {
               // $filename = $path. "/form_new.php";
                echo "视图 编辑页 $m 已存在 ! \r\n";
            }else{
                $fileSystem->dumpFile($filename, "<" . $displayStr);
                echo "视图 编辑页 $m 生成成功 ! \r\n";
            }

           // break;
        }
        echo "自动化完成! \r\n";
    }




    /**
     * 后台规则验证
     * @param $columns
     * @return string
     */
    private function rules($columns)
    {
        $rulesStr = "";
        foreach ($columns as $column) {
            if($column['Field'] == "id"){
                continue;
            }
            $itemRules = "";
            //表里面含有此类固定字段直接验证
            switch ($column['Field']) {
                case 'email':
                    $itemRules .= "'email',";
                    break;
                case 'mobile':
                    $itemRules .= "'mobile',";
                    break;
                case 'url':
                    $itemRules .= "'url',";
                    break;
                case 'ip':
                    $itemRules .= "'ip',";
                    break;
            }
            if ($column['Null'] == "NO") {
                $itemRules .= " 'required', ";
            }
            preg_match("/\w+/", $column['Type'], $type);
            preg_match("/\d+/", $column['Type'], $length);

            switch ($type[0]) {
                case 'varchar':
                    $itemRules .= " ['lengthMax', " . $length[0] . " ]";
                    break;
                case 'tinyint':
                    $itemRules .= " 'integer',['max', 127]";
                    break;
                case 'int':
                    $itemRules .= " 'integer',['max', 4294967295]";
                    break;
                case  'mediumint':
                    $itemRules .= " 'integer',['max', 8388607]";
                    break;
                case  'timestamp':
                    $itemRules .= "'date'";
                    break;
                case  'datetime':
                    $itemRules .= "'date'";
                    break;
            }
            if ($itemRules != "") {
                $rulesStr .= "\r\n '" . $column['Field'] . "' => [{$itemRules}],";
            }
        }
        return $rulesStr;
    }

    /**
     * 前端验证
     */
    public  function rulesLay($columns)
    {
        foreach ($columns as $indx=>$column) {
            $itemRules = [];
            //表里面含有此类固定字段直接验证
            if ($column['Null'] == "NO") {
                array_push($itemRules, 'required');
            }
            switch ($column['Field']) {
                case 'email':
                    array_push($itemRules, 'email');
                    break;
                case 'mobile':
                    array_push($itemRules, 'mobile');
                    break;
                case 'url':
                    array_push($itemRules, 'url');
                    break;
                case 'ip':
                    array_push($itemRules, 'ip');
                    break;
            }
            preg_match("/\w+/", $column['Type'], $type);
            switch ($type[0]) {
                case 'tinyint':
                    array_push($itemRules, 'number');
                    break;
                case 'int':
                    array_push($itemRules, 'number');
                    break;
                case  'mediumint':
                    array_push($itemRules, 'number');
                    break;
                case  'timestamp':
                    array_push($itemRules, 'date');
                    break;
                case  'datetime':
                    array_push($itemRules, 'date');
                    break;
            }
            $columns[$indx]['verify']= implode('|', $itemRules);
        }
        return $columns;
    }

    /**
     * 通过表名获取驼峰命名
     * @param $table
     * @return string
     */
    private function getTableName($table, $first = false)
    {
        $table = str_replace($GLOBALS['prefix'], "", $table);
        $tableStr = $table;
        if (strpos($table, "_")) {
            $tableStr = "";
            $tableArr = mb_split("_", $table);
            foreach ($tableArr as $v) {
                $tableStr .= ucfirst($v);
            }
        }
        if($first){
            $tableStr =  ucfirst($tableStr);
        }else{
            $tableStr = lcfirst($tableStr);
        }
        return $tableStr;
    }

    /**
     * 数据模型
     * @param $table
     */
    private function shows($table)
    {
        $this->table = $this->getTableName($table);
        $this->tableName = str_replace($GLOBALS['prefix'], "", $table);

        $db = new Model();
        $tableComments = $db->query("select TABLE_COMMENT from INFORMATION_SCHEMA.tables where table_name='{$table}'  ");
        $this->tableComment = $tableComments[0]['TABLE_COMMENT'];
        $columns = $db->query("select COLUMN_NAME as `Field`, COLUMN_TYPE as `Type`, COLUMN_COMMENT as `comment` from INFORMATION_SCHEMA.Columns where table_name='{$table}'   AND TABLE_SCHEMA='{$this->_db_name}' ");
        $fields = [];
        foreach ($columns as $field) {
            array_push($fields, $field['Field']);
        }
        $this->fields = implode("','", $fields);
        $this->rules = $this->rules($columns);
        $displayStr = $this->display("kit/model.php", true);
        return $this->filterTag($displayStr);
    }

    /**
     * 替换回去 php 标签
     * @param $displayStr
     * @return mixed
     */
    private function filterTag($displayStr)
    {
        $displayStr = str_replace('{{?', '<?', $displayStr);
        $displayStr = str_replace('?}}', '?>', $displayStr);
        return $displayStr;
    }

    /**
     * 前端验证也可以做起来
     * @param $table
     * @param $pageType
     * @return mixed|string
     */
    private function form($table, $pageType)
    {
        $db = new Model();
        $this->columns =$this->rulesLay($db->query("select COLUMN_NAME as `Field`, COLUMN_TYPE as `Type`,
       COLUMN_COMMENT as `comment`, CHARACTER_MAXIMUM_LENGTH as charmax  from INFORMATION_SCHEMA.Columns where table_name='{$table}' 
          AND TABLE_SCHEMA='{$this->_db_name}'
        "));
        $this->table = $this->getTableName($table);
        $returnVal = $this->display("kit/{$pageType}.php", true);
        return $this->filterTag($returnVal);
    }

    /**
     * 控制器模板
     * @param $table
     * @return mixed
     */
    private function controller($table)
    {
        $this->tableName = $this->getTableName($table);
        $returnVal = $this->display('kit/controller.php',true);
        return $this->filterTag($returnVal);
    }





}
